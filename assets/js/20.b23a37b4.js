(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{558:function(t,e,a){t.exports=a.p+"assets/img/img-20230812175730.a3bf6051.png"},559:function(t,e,a){t.exports=a.p+"assets/img/img-20230812180804.089404e4.png"},560:function(t,e,a){t.exports=a.p+"assets/img/img-20230812181524.16c5b60d.png"},561:function(t,e,a){t.exports=a.p+"assets/img/img-20230812182536.89b1f3e3.png"},562:function(t,e,a){t.exports=a.p+"assets/img/img-20230812183351.31529ef7.png"},563:function(t,e,a){t.exports=a.p+"assets/img/img-20230812184449.616a6d85.png"},629:function(t,e,a){"use strict";a.r(e);var n=a(5),r=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("blockquote",[e("p",[e("a",{attrs:{href:"https://github.com/purocean/yn",target:"_blank",rel:"noopener noreferrer"}},[t._v("Yank Note"),e("OutboundLink")],1),t._v(" 是我编写的笔记应用。这里我将会写下一些关于 Yank Note 的文章")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"/yank-note-01"}},[t._v("Yank Note 系列 01 - 为什么要自己写笔记软件？")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/yank-note-02"}},[t._v("Yank Note 系列 02 - Markdown 渲染性能优化之路")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/yank-note-03"}},[t._v("Yank Note 系列 03 - 同内存泄露的艰难战斗！")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/yank-note-04"}},[t._v("Yank Note 系列 04 - 编辑和预览同步滚动方案")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/yank-note-05"}},[t._v("Yank Note 系列 05 - 关于本地历史功能")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/yank-note-06"}},[t._v("Yank Note 系列 06 - 使用人工智能写文章是什么体验？")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/yank-note-07"}},[t._v("Yank Note 系列 07 - 性能暴增 132 倍的秘密——重写")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/yank-note-08"}},[t._v("Yank Note 系列 08 - 优化 Katex 公式渲染性能")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/yank-note-09"}},[t._v("Yank Note 系列 09 - 关于流的使用")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/yank-note-10"}},[t._v("Yank Note 系列 10 - 新增自定义快捷键功能")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/yank-note-11"}},[t._v("Yank Note 系列 11 - 预览内查找功能")])]),t._v(" "),e("li",[e("a",{attrs:{href:"/yank-note-12"}},[t._v("Yank Note 系列 12 - 高效构建仓库索引与知识图谱")])])])]),t._v(" "),e("p",[t._v("同样“自定义快捷键”功能一样，预览内查找功能也很早之前就有用户希望 Yank Note 能有这个功能，这个功能也迟迟没做上。之前也调研过一些方案，都不太满意。不过，一个不完美的功能，能满足用户部分需求，那么也还是可以先做上。")]),t._v(" "),e("h2",{attrs:{id:"功能期望"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#功能期望"}},[t._v("#")]),t._v(" 功能期望")]),t._v(" "),e("p",[t._v("首先说一下我理想中的“预览页内查找”功能是怎样的。")]),t._v(" "),e("p",[e("img",{staticClass:"lazy",attrs:{alt:"Img","data-src":a(558),loading:"lazy"}})]),t._v(" "),e("p",[t._v("类似浏览器的“页内查找”功能，需要")]),t._v(" "),e("ol",[e("li",[t._v("支持展示匹配数量和当前定位的序号")]),t._v(" "),e("li",[t._v("支持向上/向下查找")]),t._v(" "),e("li",[t._v("可以高亮当前和已匹配的文字")]),t._v(" "),e("li",[t._v("滚动条可以显示已匹配文字的位置")])]),t._v(" "),e("p",[t._v("除此之外，还有一些")]),t._v(" "),e("ol",[e("li",[t._v("支持大小写敏感")]),t._v(" "),e("li",[t._v("支持全字匹配")]),t._v(" "),e("li",[t._v("支持正则表达式")])]),t._v(" "),e("h2",{attrs:{id:"一些方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一些方案"}},[t._v("#")]),t._v(" 一些方案")]),t._v(" "),e("p",[t._v("要实现这个功能，目前只能分为两个方向：使用 Electron 的方法，或者基于 Web 接口。")]),t._v(" "),e("h3",{attrs:{id:"_1-基于-electron"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-基于-electron"}},[t._v("#")]),t._v(" 1. 基于 Electron")]),t._v(" "),e("p",[t._v("浏览器的“页内查找”功能已经做得比较好了，而 Yank Note 是基于 Electron 的，应该也能有这样的接口可以来实现“页内查找吧”。")]),t._v(" "),e("p",[t._v("翻 Electron 文档确实找到了一个 "),e("a",{attrs:{href:"https://www.electronjs.org/docs/latest/api/web-contents#contentsfindinpagetext-options",target:"_blank",rel:"noopener noreferrer"}},[t._v("findInPage Api"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("不过这个 API 有一些局限性，那就是真的只能实现“页内查找”。Yank Note 文档是放到 iframe 内渲染的，强行使用那就只能是这个效果。")]),t._v(" "),e("p",[e("img",{staticClass:"lazy",attrs:{alt:"Img","data-src":a(559),loading:"lazy"}})]),t._v(" "),e("p",[t._v("于是我开始找有没有能在 iframe 搜索的 Electron 接口。")]),t._v(" "),e("p",[t._v("幸运的是，VSCode 开发团队也遇到了这个问题，这里有个 "),e("a",{attrs:{href:"https://github.com/microsoft/vscode/issues/96307",target:"_blank",rel:"noopener noreferrer"}},[t._v("Issue"),e("OutboundLink")],1),t._v(" 讨论了在 Electron 中实现 iframe 页内查找的方法。")]),t._v(" "),e("p",[t._v("VSCode 团队确实比较牛逼，发现 Electron 没有这个功能，直接改造 Electron，加上了 "),e("a",{attrs:{href:"https://github.com/electron/electron/pull/28274",target:"_blank",rel:"noopener noreferrer"}},[t._v("findInFrame/stopFindInFrame"),e("OutboundLink")],1),t._v(" 方法，实现了在 iframe 中查找的功能。")]),t._v(" "),e("p",[t._v("体验了一下 VSCode，确实效果已经很不错了。")]),t._v(" "),e("p",[e("img",{staticClass:"lazy",attrs:{alt:"Img","data-src":a(560),loading:"lazy"}})]),t._v(" "),e("p",[t._v("不过遗憾，上面的 PR Electron 也没有合并，翻看 VSCode 源码虽然确实用的 "),e("code",[t._v("findInFrame/stopFindInFrame")]),t._v(" 方法，但VSCode 发行版的 Electron "),e("a",{attrs:{href:"https://github.com/microsoft/vscode/issues/96307#issuecomment-821746677",target:"_blank",rel:"noopener noreferrer"}},[t._v("是自己内部的一个分支，并未对外开放"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[t._v("我下载了 VSCode 的开源版本"),e("a",{attrs:{href:"https://vscodium.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("VSCodium - Open Source Binaries of VSCode"),e("OutboundLink")],1),t._v("，发现这个功能根本就不能使用，完全的残废。。。")]),t._v(" "),e("h3",{attrs:{id:"_2-基于-web-接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-基于-web-接口"}},[t._v("#")]),t._v(" 2. 基于 Web 接口")]),t._v(" "),e("p",[t._v("基于 Web 来做的话，基本只有使用 "),e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/find",target:"_blank",rel:"noopener noreferrer"}},[t._v("window.find"),e("OutboundLink")],1),t._v(" 来做，其他方案如自己做搜索匹配和高亮，实现起来都会非常复杂且通用性不高。")]),t._v(" "),e("p",[t._v("这个接口还是有不少缺点：")]),t._v(" "),e("ol",[e("li",[t._v("不能高亮所有的匹配项")]),t._v(" "),e("li",[t._v("滚动条不能显示匹配位置")]),t._v(" "),e("li",[t._v("不能获取匹配数量")]),t._v(" "),e("li",[t._v("不能指定和显示匹配位置")]),t._v(" "),e("li",[t._v("非标准接口，但是兼容性还行")]),t._v(" "),e("li",[t._v("当前匹配项是选中状态而不是 "),e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Highlight",target:"_blank",rel:"noopener noreferrer"}},[t._v("highlight"),e("OutboundLink")],1),t._v(" 状态")])]),t._v(" "),e("p",[t._v("VSCode 的网页版本，也是用的这个接口来做的，只能说功能比起上面的就差太多了，而且也有些小问题，比如上下箭头激活状态不正确。")]),t._v(" "),e("p",[e("img",{staticClass:"lazy",attrs:{alt:"Img","data-src":a(561),loading:"lazy"}})]),t._v(" "),e("p",[t._v("不过，也有用这个接口做得比较好的产品，如 Chrome 的 "),e("a",{attrs:{href:"https://github.com/philc/vimium",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vimium"),e("OutboundLink")],1),t._v(" 插件，就是用这个接口实现了页内查找功能，能展示匹配数量且支持正则表达式。")]),t._v(" "),e("p",[e("img",{staticClass:"lazy",attrs:{alt:"Img","data-src":a(562),loading:"lazy"}})]),t._v(" "),e("p",[t._v("看源码，他能展示匹配数量和支持正则表达式的原理是从 "),e("code",[t._v("document.body.innerText")]),t._v(" 自己做匹配，计算出每一处的匹配字符串和数量，拿着每一处的匹配字符串调用 "),e("code",[t._v("window.find")]),t._v(" 来实现页内查找功能。")]),t._v(" "),e("p",[t._v("当然这个方案的缺点就在于用 "),e("code",[t._v("document.body.innerText")]),t._v(" 匹配的东西不一定和 "),e("code",[t._v("window.find")]),t._v(" 一致。因此也没法实现展示当前匹配位置的功能。然后就是有时候虽然有匹配项，但点击查找也会“踏空”。")]),t._v(" "),e("p",[t._v("至于高亮状态，他用了一个很巧妙的方式来解决：在调用 "),e("code",[t._v("window.find")]),t._v(" 时候给页面设置一个样式类，使用 "),e("code",[t._v("::selection")]),t._v(" 选择器来高亮匹配项。接着监听 "),e("code",[t._v("selectionchange")]),t._v(" 事件，移除这个样式类。")]),t._v(" "),e("h2",{attrs:{id:"最终方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最终方案"}},[t._v("#")]),t._v(" 最终方案")]),t._v(" "),e("p",[t._v("考虑如下几点")]),t._v(" "),e("ol",[e("li",[t._v("Electron 上游的 "),e("code",[t._v("findInFrame/stopFindInFrame")]),t._v(" 还不可用")]),t._v(" "),e("li",[t._v("自己编译一套 Electorn 成本太高")]),t._v(" "),e("li",[t._v("Yank Note 需要支持在浏览器中使用")])]),t._v(" "),e("p",[t._v("所以排除使用 Electron 的方案。聚焦参考 Vimium，使用 "),e("code",[t._v("window.find")]),t._v(" 来实现。")]),t._v(" "),e("h2",{attrs:{id:"效果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#效果"}},[t._v("#")]),t._v(" 效果")]),t._v(" "),e("p",[e("img",{staticClass:"lazy",attrs:{alt:"Img","data-src":a(563),loading:"lazy"}})]),t._v(" "),e("p",[t._v("具体实现情况：")]),t._v(" "),e("ol",[e("li",[t._v("支持展示匹配数量和当前定位的序号："),e("strong",[t._v("只支持展示匹配数量，且不一定准确")])]),t._v(" "),e("li",[t._v("支持向上/向下查找："),e("strong",[t._v("支持")])]),t._v(" "),e("li",[t._v("可以高亮当前和已匹配的文字："),e("strong",[t._v("不支持")])]),t._v(" "),e("li",[t._v("滚动条可以显示已匹配文字的位置："),e("strong",[t._v("不支持")])]),t._v(" "),e("li",[t._v("支持大小写敏感："),e("strong",[t._v("支持")])]),t._v(" "),e("li",[t._v("支持全字匹配："),e("strong",[t._v("不支持")])]),t._v(" "),e("li",[t._v("支持正则表达式："),e("strong",[t._v("支持")])])]),t._v(" "),e("p",[t._v("虽然还是没完全达到理想中的效果，但至少功能有了，能满足一部分需求，还是很不错了。")]),t._v(" "),e("blockquote",[e("p",[t._v("本文由「"),e("a",{attrs:{href:"https://github.com/purocean/yn",target:"_blank",rel:"noopener noreferrer"}},[t._v("Yank Note - 一款强大可扩展的 Markdown 编辑器，为生产力而生"),e("OutboundLink")],1),t._v("」撰写")])])])}),[],!1,null,null,null);e.default=r.exports}}]);